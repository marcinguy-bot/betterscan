version: '3'
services:
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    working_dir: /srv/betterscan/
    entrypoint: sh -c
    command: |
      mkdir -p data1/repositories data2/tasks setup_state;
      if [ -f /srv/betterscan/setup_state/setup_done ]; then
        python /srv/betterscan/manage.py runserver;
      else
        python /srv/betterscan/manage.py setup && touch /srv/betterscan/setup_state/setup_done;
      fi
    ports:
      - 5000:5000
    volumes:
      - data1:/srv/betterscan/quantifiedcode/data/
      - data2:/srv/betterscan/quantifiedcode/backend/data/tasks
      - setup_state:/srv/betterscan/setup_state

  postgres:
    image: postgres:13.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: qc
      POSTGRES_USER: qc
      POSTGRES_PASSWORD: qc
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qc"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker_1:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    restart: on-failure
    depends_on:
      rabbitmq3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy
    working_dir: /srv/betterscan/
    entrypoint: sh -c
    command: python /srv/betterscan/manage.py runworker
    volumes:
      - data1:/srv/betterscan/quantifiedcode/data/
      - data2:/srv/betterscan/quantifiedcode/backend/data/tasks

  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: qc
      RABBITMQ_DEFAULT_PASS: qc
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  data1:
    driver: local
  data2:
    driver: local
  setup_state:
    driver: local
  db-data:
    driver: local

